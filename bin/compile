#!/bin/bash
#
# Adapted from https://github.com/kr/heroku-buildpack-go
#
# usage: bin/compile <build-dir> <cache-dir>

set -eo pipefail

source "${OPENSHIFT_GO_DIR}/lib/util"

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
# https://storage.googleapis.com/golang/go1.2.2.linux-amd64.tar.gz
ver=${GOVERSION:-1.2.2}
file=${GOFILE:-go$ver.$(uname|tr A-Z a-z)-amd64.tar.gz}
url=${GOURL:-https://storage.googleapis.com/golang/$file}
buildpack=$(dirname $(dirname $0))

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.6
PATH=$venv/bin:$PATH

#virtualenv() {
#    python "$buildpack/vendor/virtualenv-1.7/virtualenv.py" "$@"
#}

if test -e $build/bin && ! test -d $build/bin
then
    echo >&2 " !     File bin exists and is not a directory."
    exit 1
fi

if ! test -f $build/.godir
then
    echo >&2 " !     A .godir is required. For instructions:"
    echo >&2 " !     http://mmcgrana.github.com/2012/09/getting-started-with-go-on-heroku"
    echo >&2 " !     https://www.openshift.com/kb/kb-TDOD-some-golang-instructions"
    exit 1
fi

if test -d $cache/go-$ver/go
then
    echo "-----> Using Go $ver"
else
    #rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/go-$ver
    cd $cache/go-$ver
    echo    "       First download, may take several minutes"
    echo -n "-----> Installing Go $ver..."
    curl -sO $url
    tar zxf $file
    rm -f $file
    echo " done"
fi

GOROOT=$cache/go-$ver/go export GOROOT
PATH=$GOROOT/bin:$PATH
GOPATH=$build/.openshift/g export GOPATH
if ! (which hg >/dev/null 2>&1 && which bzr >/dev/null 2>&1)
then
    echo -n "       Installing Virtualenv..."
    virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv 2>&1 > /dev/null 
    . $venv/bin/activate 2>&1 > /dev/null
    echo " done"

    echo -n "       Installing Mercurial..."
    pip install --use-mirrors mercurial 2>&1 > /dev/null
    echo " done"

    echo -n "       Installing Bazaar..."
    pip install --use-mirrors bzr 2>&1 > /dev/null
    echo " done"
fi

if test -f $build/.gopath
then
    CUSTOM_GOPATH=$OPENSHIFT_HOMEDIR$(get_gopath $build/.gopath) export CUSTOM_GOPATH
fi

name=$(get_godir $build/.godir)
p=${CUSTOM_GOPATH:-$GOPATH}/src/$name
b=${CUSTOM_GOPATH:-$GOPATH}/bin

mkdir -p $p
cp -a $build/* $p

unset GIT_DIR # unset git dir or it will mess with goinstall
echo "-----> Running: go get -tags openshift ./..."
cd $p

if test -f $build/.gopath
then
    GOPATH=$CUSTOM_GOPATH:$GOPATH export GOPATH
fi
go get -tags openshift ./...

mkdir -p $build/bin
mv $b/* $build/bin

mkdir -p $build/.profile.d
echo 'export PATH=$PATH' > $build/.profile.d/go.sh

rm -rf $build/.openshift/g # this removes the constructed $GOPATH

echo $GOROOT > $OPENSHIFT_GO_DIR/env/GOROOT
echo $GOPATH > $OPENSHIFT_GO_DIR/env/GOPATH
echo "$HOME/bin:$GOROOT/bin" > $OPENSHIFT_GO_DIR/env/OPENSHIFT_GO_PATH_ELEMENT
